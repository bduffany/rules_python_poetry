import os
import pathlib

from stdlib_list import short_versions, stdlib_list

"""
gen.py generates the versions.go file. Run with `bazel run //internal/gazelle/stdlib:gen`.
"""


def main():
    package_versions = get_package_versions()
    output_path = get_output_path()
    write_output_file(output_path, package_versions)


def get_package_versions():
    package_versions = {}
    for version in short_versions:
        modules = stdlib_list(version)
        packages = set(m.split(".")[0] for m in modules)
        for package in packages:
            if package in package_versions:
                package_versions[package][1] = version
            else:
                package_versions[package] = [version, version]
    return package_versions


def get_output_path():
    if "BUILD_WORKSPACE_DIRECTORY" in os.environ:
        workspace = pathlib.Path(os.environ["BUILD_WORKSPACE_DIRECTORY"])
        return workspace / "internal/gazelle/stdlib/stdlib.go"
    return pathlib.Path(__file__).parent / "stdlib.go"


def write_output_file(path, package_versions):
    lines = []
    for package in sorted(package_versions):
        min, max = package_versions[package]
        min_major, min_minor = min.split(".")
        max_major, max_minor = max.split(".")
        line = '"{}": {{version.Version{{{}, {}}}, version.Version{{{}, {}}}}},'.format(
            package, min_major, min_minor, max_major, max_minor)
        lines.append(line)

    latest = short_versions[-1]
    latest_major, latest_minor = latest.split(".")

    body = """\
// Code generated by gen.py. DO NOT EDIT.
// Supported Python versions: {supported_versions}

package stdlib

import "github.com/martinxsliu/rules_python_poetry/internal/gazelle/version"

var Latest = version.Version{{Major: {latest_major}, Minor: {latest_minor}}}

type VersionRange struct {{
\tMin, Max version.Version
}}

var Packages = map[string]VersionRange{{
\t{packages}
}}
""".format(
        supported_versions=", ".join(short_versions),
        latest_major=latest_major,
        latest_minor=latest_minor,
        packages="\n\t".join(lines),
    )
    with open(path, "w") as f:
        f.write(body)


if __name__ == "__main__":
    main()
